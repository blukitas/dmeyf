df$consumo_diario_alcohol
) * -1
df[is.na(df$puntaje_insano)]$puntaje_insano <- 0
df <- df %>%
mutate(consumo_snack_modif = dplyr::case_when(
consumo_semanal_snacks == 'No comí comida salada o snacks en los últimos 7 días' ~  "Muy baja",
consumo_semanal_snacks == '1 a 3 veces durante los últimos 7 días' ~ "Baja",
consumo_semanal_snacks == '4 a 6 veces durante los últimos 7 días' ~ "Baja",
consumo_semanal_snacks == '1 vez al día' ~ "Media",
consumo_semanal_snacks == '2 veces al día' ~ "Media",
consumo_semanal_snacks == '3 veces al día' ~ "Alta",
consumo_semanal_snacks == '4 o más veces al día'  ~ "Alta",
consumo_semanal_snacks == 'Dato perdido' ~ "Desconocida",
)
)
df$consumo_snack_modif <- factor(df$consumo_snack_modif,
levels = c('Muy baja',
'Baja',
'Media',
'Alta',
'Desconocida'
)
)
df
}
test <- transformar_dataframe(test)
# Aplicamos la función augment a los 4 modelos con el set de testing
lista_predicciones_testing = map(.x = models, .f = augment, newdata = test)
# Obtenemos el RMSE para los 4 modelos
map_dfr(
.x = lista_predicciones_testing,
.f = yardstick::rmse,
truth = peso,
estimate = .fitted,
.id = "modelo"
) %>% arrange(.estimate)
map_dfr(
.x = lista_predicciones_testing,
.f = yardstick::mae,
truth = peso,
estimate = .fitted,
.id = "modelo"
) %>% arrange(.estimate)
plot(modelo_inicial)
head(modelo6)
tabla_exploratorios =  modelo6 %>%
gather(.,
key = "variables",
value = "valores") %>% # agrupamos por las variables del set
group_by(variables) %>%
summarise(valores_unicos = n_distinct(valores),
porcentaje_faltantes = sum(is.na(valores))/nrow(modelo6)*100) %>%
arrange(desc(porcentaje_faltantes), valores_unicos) # ordenamos por porcentaje de faltantes y valores unicos
tabla_exploratorios
modelo6 %>% ggplot(., aes(x = altura, y = peso)) +
geom_point() + #capa de los datos
theme_bw() +
scale_x_continuous(limits = c(110,210)) +
scale_y_continuous(limits = c(0,200)) +
labs(title="Modelo Lineal Múltiple: Altura y genero", x="altura", y="peso")
paste0("Correlacion de Pearson (Train):     ", cor.test(train$peso, train$altura, method = "pearson")$estimate)
paste0("Correlacion de Spearman (Train):     ", cor.test(train$peso, train$altura, method = "spearman")$estimate)
paste0("Correlacion de Pearson (Modelo6):   ", cor.test(modelo6$peso, modelo6$altura, method = "pearson")$estimate)
paste0("Correlacion de Spearman (Modelo6):  ", cor.test(modelo6$peso, modelo6$altura, method = "spearman")$estimate)
modelo6 %>% ggplot(., aes(x = edad, y = peso)) +
geom_point() + #capa de los datos
theme_bw() +
scale_x_continuous(limits = c(10,20)) +
scale_y_continuous(limits = c(0,200)) +
labs(title="Modelo Lineal Múltiple: edad y peso", x="edad", y="peso")
paste0("Correlacion de Pearson (Train):     ", cor.test(train$peso, train$edad, method = "pearson")$estimate)
paste0("Correlacion de Spearman (Train):     ", cor.test(train$peso, train$edad, method = "spearman")$estimate)
paste0("Correlacion de Pearson (Modelo6):   ", cor.test(modelo6$peso, modelo6$edad, method = "pearson")$estimate)
paste0("Correlacion de Spearman (Modelo6):  ", cor.test(modelo6$peso, modelo6$edad, method = "spearman")$estimate)
modelo6_inicial <- lm(peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = modelo6)
# Resumen del modelo
tidy_modelo6 <- tidy(modelo6_inicial, conf.int = TRUE)
tidy_modelo6
#fit robust regression model
modelo_robusto <- rlm(peso ~ altura + edad + genero + dias_actividad_fisica_semanal + consumo_diario_alcohol, data = train)
#find residual standard error of ols model
paste0("Error residual estandar (Modelo inicial simple): ", summary(modelo_inicial)$sigma)
paste0("Error residual estandar (Modelo inicial robusto): ", summary(modelo_robusto)$sigma)
summary(modelo_inicial)
summary(modelo_robusto)
modelo6$dias_actividad_fisica_semanal <-
factor(modelo6$dias_actividad_fisica_semanal)
# Lista de modelos
models <-
list(modelo_inicial = modelo_inicial, modelo_robusto = modelo_robusto)
# Augment sobre los datos de train
lista_predicciones_testing = map(.x = models, .f = augment, newdata = modelo6)
# Calculo de RMSE
map_dfr(
.x = lista_predicciones_testing,
.f = yardstick::rmse,
truth = peso,
estimate = .fitted,
.id = "modelo"
) %>% arrange(.estimate)
map_dfr(
.x = lista_predicciones_testing,
.f = yardstick::mae,
truth = peso,
estimate = .fitted,
.id = "modelo"
) %>% arrange(.estimate)
paste0("MAD de residuos del modelo inicial: ", mad(residuals(modelo_inicial)))
paste0("MAD de residuos del modelo robusto: ", mad(residuals(modelo_robusto)))
paste0("MAPE de residuos del modelo inicial: ", modelr::mape(modelo_robusto, lista_predicciones_testing$modelo_robusto))
paste0("MAPE de residuos del modelo robusto: ", modelr::mape(modelo_inicial, lista_predicciones_testing$modelo_inicial))
qae(modelo_robusto, lista_predicciones_testing$modelo_robusto)
qae(modelo_inicial, lista_predicciones_testing$modelo_inicial)
#Necesita para correr en Google Cloud
#32 GB de memoria RAM
#256 GB de espacio en el disco local
#8 vCPU
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("yaml")
require("lightgbm")
require("primes")  #para generar semillas
directory.root <- "~/buckets/b1/"
setwd( directory.root )
kexperimento  <- NA
kscript         <- "981_epic"
karch_dataset   <- "./datasets/dataset_epic_v951.csv.gz"  #el dataset que voy a utilizar
ktest_mes_hasta  <- 202011  #Esto es lo que uso para testing
ktest_mes_desde  <- 202011
kgen_mes_hasta   <- 202009  #hasta donde voy a entrenar
kgen_mes_desde   <- 201901  #desde donde voy a entrenar
kgen_meses_malos <- 202006  #el mes que voy a eliminar del entreanamiento
kgen_subsampling <- 1.0     #esto es NO hacer undersampling
campos_malos  <- c()   #aqui se deben cargar todos los campos culpables del Data Drifting
#------------------------------------------------------------------------------
#Funcion que lleva el registro de los experimentos
get_experimento  <- function()
{
if( !file.exists( "./maestro.yaml" ) )  cat( file="./maestro.yaml", "experimento: 1000" )
exp  <- read_yaml( "./maestro.yaml" )
experimento_actual  <- exp$experimento
exp$experimento  <- as.integer(exp$experimento + 1)
Sys.chmod( "./maestro.yaml", mode = "0644", use_umask = TRUE)
write_yaml( exp, "./maestro.yaml" )
Sys.chmod( "./maestro.yaml", mode = "0444", use_umask = TRUE) #dejo el archivo readonly
return( experimento_actual )
}
#------------------------------------------------------------------------------
#Aqui empieza el programa
if( is.na(kexperimento ) )   kexperimento <- get_experimento()  #creo el experimento
#en estos archivos quedan los resultados
dir.create( paste0( "./work/E",  kexperimento, "/" ) )     #creo carpeta del experimento dentro de work
kresultados  <- paste0("./work/E",  kexperimento, "/E",  kexperimento, "_", kscript, ".txt" )  #archivo donde dejo el resultado
#cargo el dataset que tiene los 36 meses
dataset  <- fread(karch_dataset)
#cargo los datos donde voy a aplicar el modelo
dtest  <- copy( dataset[ foto_mes>= ktest_mes_desde &  foto_mes<= ktest_mes_hasta,  ] )
#creo la clase_binaria2   1={ BAJA+2,BAJA+1}  0={CONTINUA}
dataset[ , clase01:= ifelse( clase_ternaria=="CONTINUA", 0, 1 ) ]
#agrego la marca de lo que necesito
#SI hago undersampling de los CONTINUA
vector_azar  <- runif( nrow(dataset) )
dataset[    foto_mes>= kgen_mes_desde  &
foto_mes<= kgen_mes_hasta  &
!( foto_mes %in% kgen_meses_malos ) &
( clase01==1 | vector_azar < kgen_subsampling ),
generacion:= 1L ]  #donde genero el modelo
#los campos que se van a utilizar
campos_buenos  <- setdiff( colnames(dataset),
c("clase_ternaria","clase01", "generacion", "test", campos_malos) )
#dejo los datos en el formato que necesita LightGBM
dtrain  <- lgb.Dataset( data=    data.matrix(  dataset[ generacion==1 , campos_buenos, with=FALSE]),
label=   dataset[ generacion==1, clase01],
free_raw_data= TRUE
)
rm( "dataset" )   #libero memoria para el dataset
gc()              #garbage collection
# TODO: Hiperparametros para segunda BO
#Estos son los parametros que estan fijos
param_basicos  <- list( objective= "binary",
metric= "custom",
first_metric_only= TRUE,
boost_from_average= TRUE,
feature_pre_filter= FALSE,
max_depth=  -1,         # -1 significa no limitar,  por ahora lo dejo fijo
min_gain_to_split= 0.0, #por ahora, lo dejo fijo
lambda_l1= 0.0,         #por ahora, lo dejo fijo
lambda_l2= 0.0,         #por ahora, lo dejo fijo
max_bin= 31,            #por ahora, lo dejo fijo
force_row_wise= TRUE    #para que los alumnos no se atemoricen con tantos warning
)
#Estos hiperparametros salieron de la optimizacion bayesiana del script 961
#ganancia  6991250  ( sobre la mitad de 202011 )
#hiperparametros encontrados en la iteracion bayesiana 56 de un total de 100 inteligentes
param_ganadores  <- list( "learning_rate"= 0.09,
"feature_fraction"= 0.6,
"min_data_in_leaf"= 2050,
"num_leaves"= 231,
"num_iterations"= 155,
"ratio_corte"= 0.04
)
#junto ambas listas de parametros en una sola
param_completo  <- c( param_basicos, param_ganadores )
#donde voy a guardar los resultados
tb_resultados  <- data.table( semilla= integer(),
subsamping= numeric(),
oficial= integer(),
meseta= integer(),
ganancia= numeric() )
# set.seed( 102191 )   #dejo fija esta semilla
set.seed( 135221 )   #dejo fija esta semilla
CANTIDAD_SEMILLAS  <- 50
#me genero un vector de semilla buscando numeros primos al azar
primos  <- generate_primes(min=100000, max=1000000)  #genero TODOS los numeros primos entre 100k y 1M
ksemillas  <- sample(primos)[ 1:CANTIDAD_SEMILLAS ]   #me quedo con CANTIDAD_SEMILLAS primos al azar
ksemillas  <- c( 999983, ksemillas )
for(  semillita  in  ksemillas )   #itero por las semillas
{
gc()
param_completo$seed  <- semillita   #asigno la semilla a esta corrida
set.seed( semillita )
#genero el modelo, los hiperparametros son siempre los mismos, la semilla CAMBIA
modelo  <- lgb.train( data= dtrain,
param= param_completo )
#aplico el modelo a los datos que elegi para testing  202011
prediccion  <- predict( modelo, data.matrix( dtest[ , campos_buenos, with=FALSE]) )
#creo una tabla con las probabilidades y la ganancia de ese registro
tb_meseta  <- as.data.table( list( "prob"=prediccion,  "gan"=  dtest[ , ifelse( clase_ternaria=="BAJA+2", 48750, - 1250)] ))
setorder( tb_meseta,  -prob )
#calculo la ganancia  para el ratio de corte original
pos_corte  <- as.integer( nrow(dtest)* param_completo$ratio_corte )
ganancia   <- tb_meseta[  1:pos_corte, sum(gan) ]
tb_resultados  <- rbind( tb_resultados, list( semillita,
kgen_subsampling,
1,  #SI es el punto oficial
pos_corte,
ganancia ) )  #agrego la ganancia estandar
for( punto_meseta  in seq( 5000, 15000, by=500 ) )  #itero desde 5000 a 15000 , de a 500
{
ganancia  <-  tb_meseta[ 1:punto_meseta, sum(gan) ]   #calculo la ganancia de los mejores punto_meseta registros
tb_resultados  <- rbind( tb_resultados, list( semillita,
kgen_subsampling,
0,  #No es el punto oficial
punto_meseta,
ganancia ) )  #agrego la ganancia estandar
}
#en cada iteracion GRABO
fwrite(  tb_resultados,
file= kresultados,
sep= "\t" )
}
primos  <- generate_primes(min=100000, max=1000000)  #genero TODOS los numeros primos entre 100k y 1M
require("primes")  #para generar semillas
install.packages("primes")
install.packages("primes")
install.packages("primes")
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
setwd("~/buckets/b1/")
setwd("/home/lucas/Desktop/2021/Maestria/02.05.Data.Mining.E.y.F/Repo.TP/dmeyf/src/99.buckets/")  #Establezco el Working Directory
corrida <- list()
# corrida$arch_testing1  <- "./work/E5008/E5008_981_epic.txt"
# corrida$arch_testing1  <- "./work/E5009/E5009_982_epic.txt"
corrida$arch_testing1  <- "./work/E5029/E5029_988_184_epic.txt"
# corrida$arch_testing1  <- "./work/E5017/E5017_987_61_epic.txt"
# corrida$arch_testing1  <- "./work/E5010/E5010_983_epic.txt"
# corrida$arch_testing2  <- "./work/E5012/E5012_984_epic.txt"
corrida$arch_testing2  <- "./work/E5035/E5035_1081_41_epic"
# corrida$arch_kaggle1  <- "./work/E5016_991_epic.txt"
# corrida$arch_kaggle2  <- "./work/E5018_992_epic.txt"
corrida$arch_salida   <- "./work/901_982vs988.pdf"
#leo los datasets
resultados_testing1  <- fread( corrida$arch_testing1 )
resultados_testing2  <- fread( corrida$arch_testing2 )
#divido por un millon para visualizar mas facil
resultados_testing1[   , ganancia  := ganancia/1e6 ]
resultados_testing2[   , ganancia  := ganancia/1e6 ]
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][ 1:10],
resultados_testing1[ oficial==1, ganancia ][11:20],
paired=TRUE
)
#Sobre el experimento 1 y el experimento 2
#Deberia dar que son distintos (p-value < 0.05)
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][  1:20],
resultados_testing2[ oficial==1, ganancia ][  1:20],
paired=TRUE
)
#leo los datasets
resultados_testing1  <- fread( corrida$arch_testing1 )
resultados_testing2  <- fread( corrida$arch_testing2 )
# corrida$arch_testing1  <- "./work/E5017/E5017_987_61_epic.txt"
# corrida$arch_testing1  <- "./work/E5010/E5010_983_epic.txt"
# corrida$arch_testing2  <- "./work/E5012/E5012_984_epic.txt"
corrida$arch_testing2  <- "./work/E5035/E5035_1081_41_epic.txt"
# corrida$arch_kaggle1  <- "./work/E5016_991_epic.txt"
# corrida$arch_kaggle2  <- "./work/E5018_992_epic.txt"
corrida$arch_salida   <- "./work/901_982vs988.pdf"
#leo los datasets
resultados_testing1  <- fread( corrida$arch_testing1 )
resultados_testing2  <- fread( corrida$arch_testing2 )
#divido por un millon para visualizar mas facil
resultados_testing1[   , ganancia  := ganancia/1e6 ]
resultados_testing2[   , ganancia  := ganancia/1e6 ]
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][ 1:10],
resultados_testing1[ oficial==1, ganancia ][11:20],
paired=TRUE
)
#Sobre el experimento 1 y el experimento 2
#Deberia dar que son distintos (p-value < 0.05)
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][  1:20],
resultados_testing2[ oficial==1, ganancia ][  1:20],
paired=TRUE
)
#Hay solo 10 datos, pero debería darse cuenta que son distintos
resultados_testing1[ oficial==1, ganancia ][ 1:20]
#Sobre el experimento 1 y el experimento 2
#Deberia dar que son distintos (p-value < 0.05)
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][  1:20],
resultados_testing2[ oficial==1, ganancia ][  1:20],
paired=TRUE
)
resultados_testing2[ oficial==1, ganancia ][1:20]
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
setwd("~/buckets/b1/")
setwd("/home/lucas/Desktop/2021/Maestria/02.05.Data.Mining.E.y.F/Repo.TP/dmeyf/src/99.buckets/")  #Establezco el Working Directory
corrida <- list()
# corrida$arch_testing1  <- "./work/E5008/E5008_981_epic.txt"
# corrida$arch_testing1  <- "./work/E5009/E5009_982_epic.txt"
corrida$arch_testing1  <- "./work/E5029/E5029_988_184_epic.txt"
# corrida$arch_testing1  <- "./work/E5017/E5017_987_61_epic.txt"
# corrida$arch_testing1  <- "./work/E5010/E5010_983_epic.txt"
# corrida$arch_testing2  <- "./work/E5012/E5012_984_epic.txt"
# corrida$arch_testing2  <- "./work/E5035/E5035_1081_41_epic.txt"
corrida$arch_testing2  <- "./work/E5036/E5036_1081_78_epic.txt"
# corrida$arch_kaggle1  <- "./work/E5016_991_epic.txt"
# corrida$arch_kaggle2  <- "./work/E5018_992_epic.txt"
corrida$arch_salida   <- "./work/901_982vs988.pdf"
#leo los datasets
resultados_testing1  <- fread( corrida$arch_testing1 )
resultados_testing2  <- fread( corrida$arch_testing2 )
#divido por un millon para visualizar mas facil
resultados_testing1[   , ganancia  := ganancia/1e6 ]
resultados_testing2[   , ganancia  := ganancia/1e6 ]
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][ 1:10],
resultados_testing1[ oficial==1, ganancia ][11:20],
paired=TRUE
)
#Sobre el experimento 1 y el experimento 2
#Deberia dar que son distintos (p-value < 0.05)
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][  1:20],
resultados_testing2[ oficial==1, ganancia ][  1:20],
paired=TRUE
)
#Hay solo 10 datos, pero debería darse cuenta que son distintos
resultados_testing1[ oficial==1, ganancia ][ 1:20]
resultados_testing2[ oficial==1, ganancia ][1:20]
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
setwd("~/buckets/b1/")
setwd("/home/lucas/Desktop/2021/Maestria/02.05.Data.Mining.E.y.F/Repo.TP/dmeyf/src/99.buckets/")  #Establezco el Working Directory
corrida <- list()
# corrida$arch_testing1  <- "./work/E5008/E5008_981_epic.txt"
# corrida$arch_testing1  <- "./work/E5009/E5009_982_epic.txt"
corrida$arch_testing1  <- "./work/E5029/E5029_988_184_epic.txt"
# corrida$arch_testing1  <- "./work/E5017/E5017_987_61_epic.txt"
# corrida$arch_testing1  <- "./work/E5010/E5010_983_epic.txt"
# corrida$arch_testing2  <- "./work/E5012/E5012_984_epic.txt"
# corrida$arch_testing2  <- "./work/E5035/E5035_1081_41_epic.txt"
corrida$arch_testing2  <- "./work/E5037/E5037_1081_132_epic.txt"
# corrida$arch_kaggle1  <- "./work/E5016_991_epic.txt"
# corrida$arch_kaggle2  <- "./work/E5018_992_epic.txt"
corrida$arch_salida   <- "./work/901_982vs988.pdf"
#leo los datasets
resultados_testing1  <- fread( corrida$arch_testing1 )
resultados_testing2  <- fread( corrida$arch_testing2 )
#divido por un millon para visualizar mas facil
resultados_testing1[   , ganancia  := ganancia/1e6 ]
resultados_testing2[   , ganancia  := ganancia/1e6 ]
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][ 1:10],
resultados_testing1[ oficial==1, ganancia ][11:20],
paired=TRUE
)
#Sobre el experimento 1 y el experimento 2
#Deberia dar que son distintos (p-value < 0.05)
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][  1:20],
resultados_testing2[ oficial==1, ganancia ][  1:20],
paired=TRUE
)
#Hay solo 10 datos, pero debería darse cuenta que son distintos
resultados_testing1[ oficial==1, ganancia ][ 1:20]
resultados_testing2[ oficial==1, ganancia ][1:20]
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
setwd("~/buckets/b1/")
setwd("/home/lucas/Desktop/2021/Maestria/02.05.Data.Mining.E.y.F/Repo.TP/dmeyf/src/99.buckets/")  #Establezco el Working Directory
corrida <- list()
# corrida$arch_testing1  <- "./work/E5008/E5008_981_epic.txt"
# corrida$arch_testing1  <- "./work/E5009/E5009_982_epic.txt"
corrida$arch_testing1  <- "./work/E5029/E5029_988_184_epic.txt"
# corrida$arch_testing1  <- "./work/E5017/E5017_987_61_epic.txt"
# corrida$arch_testing1  <- "./work/E5010/E5010_983_epic.txt"
# corrida$arch_testing2  <- "./work/E5012/E5012_984_epic.txt"
# corrida$arch_testing2  <- "./work/E5035/E5035_1081_41_epic.txt"
corrida$arch_testing2  <- "./work/E5038/E5038_1082_39_epic.txt"
# corrida$arch_kaggle1  <- "./work/E5016_991_epic.txt"
# corrida$arch_kaggle2  <- "./work/E5018_992_epic.txt"
corrida$arch_salida   <- "./work/901_982vs988.pdf"
#leo los datasets
resultados_testing1  <- fread( corrida$arch_testing1 )
resultados_testing2  <- fread( corrida$arch_testing2 )
#divido por un millon para visualizar mas facil
resultados_testing1[   , ganancia  := ganancia/1e6 ]
resultados_testing2[   , ganancia  := ganancia/1e6 ]
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][ 1:10],
resultados_testing1[ oficial==1, ganancia ][11:20],
paired=TRUE
)
#Sobre el experimento 1 y el experimento 2
#Deberia dar que son distintos (p-value < 0.05)
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][  1:20],
resultados_testing2[ oficial==1, ganancia ][  1:20],
paired=TRUE
)
#Hay solo 10 datos, pero debería darse cuenta que son distintos
resultados_testing1[ oficial==1, ganancia ][ 1:20]
resultados_testing2[ oficial==1, ganancia ][1:20]
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
setwd("~/buckets/b1/")
setwd("/home/lucas/Desktop/2021/Maestria/02.05.Data.Mining.E.y.F/Repo.TP/dmeyf/src/99.buckets/")  #Establezco el Working Directory
corrida <- list()
# corrida$arch_testing1  <- "./work/E5008/E5008_981_epic.txt"
# corrida$arch_testing1  <- "./work/E5009/E5009_982_epic.txt"
corrida$arch_testing1  <- "./work/E5029/E5029_988_184_epic.txt"
# corrida$arch_testing1  <- "./work/E5017/E5017_987_61_epic.txt"
# corrida$arch_testing1  <- "./work/E5010/E5010_983_epic.txt"
# corrida$arch_testing2  <- "./work/E5012/E5012_984_epic.txt"
# corrida$arch_testing2  <- "./work/E5035/E5035_1081_41_epic.txt"
corrida$arch_testing2  <- "./work/E5039/E5039_1082_74_epic.txt"
# corrida$arch_kaggle1  <- "./work/E5016_991_epic.txt"
# corrida$arch_kaggle2  <- "./work/E5018_992_epic.txt"
corrida$arch_salida   <- "./work/901_982vs988.pdf"
#leo los datasets
resultados_testing1  <- fread( corrida$arch_testing1 )
resultados_testing2  <- fread( corrida$arch_testing2 )
#divido por un millon para visualizar mas facil
resultados_testing1[   , ganancia  := ganancia/1e6 ]
resultados_testing2[   , ganancia  := ganancia/1e6 ]
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][ 1:10],
resultados_testing1[ oficial==1, ganancia ][11:20],
paired=TRUE
)
#Sobre el experimento 1 y el experimento 2
#Deberia dar que son distintos (p-value < 0.05)
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][  1:20],
resultados_testing2[ oficial==1, ganancia ][  1:20],
paired=TRUE
)
#Hay solo 10 datos, pero debería darse cuenta que son distintos
resultados_testing1[ oficial==1, ganancia ][ 1:20]
resultados_testing2[ oficial==1, ganancia ][1:20]
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
setwd("~/buckets/b1/")
setwd("/home/lucas/Desktop/2021/Maestria/02.05.Data.Mining.E.y.F/Repo.TP/dmeyf/src/99.buckets/")  #Establezco el Working Directory
corrida <- list()
# corrida$arch_testing1  <- "./work/E5008/E5008_981_epic.txt"
# corrida$arch_testing1  <- "./work/E5009/E5009_982_epic.txt"
corrida$arch_testing1  <- "./work/E5029/E5029_988_184_epic.txt"
# corrida$arch_testing1  <- "./work/E5017/E5017_987_61_epic.txt"
# corrida$arch_testing1  <- "./work/E5010/E5010_983_epic.txt"
# corrida$arch_testing2  <- "./work/E5012/E5012_984_epic.txt"
# corrida$arch_testing2  <- "./work/E5035/E5035_1081_41_epic.txt"
corrida$arch_testing2  <- "./work/E5040/E5040_1082_85_epic.txt"
# corrida$arch_kaggle1  <- "./work/E5016_991_epic.txt"
# corrida$arch_kaggle2  <- "./work/E5018_992_epic.txt"
corrida$arch_salida   <- "./work/901_982vs988.pdf"
#leo los datasets
resultados_testing1  <- fread( corrida$arch_testing1 )
resultados_testing2  <- fread( corrida$arch_testing2 )
#divido por un millon para visualizar mas facil
resultados_testing1[   , ganancia  := ganancia/1e6 ]
resultados_testing2[   , ganancia  := ganancia/1e6 ]
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][ 1:10],
resultados_testing1[ oficial==1, ganancia ][11:20],
paired=TRUE
)
#Sobre el experimento 1 y el experimento 2
#Deberia dar que son distintos (p-value < 0.05)
wilcox.test(  resultados_testing1[ oficial==1, ganancia ][  1:20],
resultados_testing2[ oficial==1, ganancia ][  1:20],
paired=TRUE
)
#Hay solo 10 datos, pero debería darse cuenta que son distintos
resultados_testing1[ oficial==1, ganancia ][ 1:20]
resultados_testing2[ oficial==1, ganancia ][1:20]
